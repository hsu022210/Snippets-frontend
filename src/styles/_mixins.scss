@use "sass:map";
@use "sass:math";
@use "./variables" as *;

// Media query mixins
@mixin breakpoint($size) {
  @if map.has-key($breakpoints, $size) {
    @media (min-width: map.get($breakpoints, $size)) {
      @content;
    }
  }
}

@mixin breakpoint-down($size) {
  @if map.has-key($breakpoints, $size) {
    @media (max-width: map.get($breakpoints, $size)) {
      @content;
    }
  }
}

// Flexbox utilities
@mixin flex-center {
  display: flex;
  align-items: center;
  justify-content: center;
}

@mixin flex-between {
  display: flex;
  align-items: center;
  justify-content: space-between;
}

// Typography utilities
@mixin font-size($size) {
  @if map.has-key($font-sizes, $size) {
    font-size: map.get($font-sizes, $size);
  }
}

// Spacing utilities
@mixin spacing($property, $size) {
  @if map.has-key($content-spacing, $size) {
    #{$property}: map.get($content-spacing, $size);
  }
}

// Shadow utilities
@mixin shadow($type: 'base') {
  @if $type == 'sm' {
    box-shadow: $card-shadow;
  } @else if $type == 'base' {
    box-shadow: $container-shadow;
  } @else if $type == 'lg' {
    box-shadow: $card-shadow-hover;
  }
}

// Border radius utilities
@mixin border-radius($size) {
  @if map.has-key($border-radius, $size) {
    border-radius: map.get($border-radius, $size);
  }
}

// Two-axis spacing utility (e.g., padding or margin with x/y values)
@mixin spacing-x($property, $size-x, $size-y) {
  @if map.has-key($content-spacing, $size-x) and map.has-key($content-spacing, $size-y) {
    #{$property}: map.get($content-spacing, $size-x) map.get($content-spacing, $size-y);
  }
}

// Hover effect utility
@mixin hover-lift {
  transition: transform 0.2s ease-in-out, box-shadow 0.2s ease-in-out;
  &:hover {
    transform: translateY(-2px);
    @include shadow('lg');
  }
}

// Hover background and opacity utility
@mixin hover-bg($color, $opacity: 0.8) {
  &:hover {
    background-color: $color;
    opacity: $opacity;
  }
} 